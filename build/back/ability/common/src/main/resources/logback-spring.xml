<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="5 seconds">

    <!-- 引入 Spring 环境中的变量 -->
    <springProperty name="APP_NAME" source="spring.application.name"/>
    <springProperty name="PROFILE" source="spring.profiles.active"/>

    <!-- 单色日志格式 LOG_PATTERN -->
    <property name="LOG_PATTERN_DEFAULT"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{tid}] [%thread] %-5level %logger{36} - %msg %n"/>
    <!-- 彩色日志格式 -->
    <property name="LOG_PATTERN_HIGHLIGHT"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{tid}] [%thread] %highlight(%-5level) %logger{36} - %highlight(%msg) %n"/>
    <!-- 默认使用普通格式 -->
    <property name="LOG_PATTERN" value="${LOG_PATTERN_DEFAULT}"/>

    <!-- 判断环境选择彩色日志格式 -->
    <!-- 开发环境：使用彩色输出 -->
    <springProfile name="dev">
        <property name="LOG_PATTERN" value="${LOG_PATTERN_HIGHLIGHT}"/>
    </springProfile>
    <!-- 测试环境：使用彩色输出 -->
    <springProfile name="test">
        <property name="LOG_PATTERN" value="${LOG_PATTERN_HIGHLIGHT}"/>
    </springProfile>
    <!-- 生产环境：不使用彩色输出 -->
    <springProfile name="prod">
        <property name="LOG_PATTERN" value="${LOG_PATTERN_DEFAULT}"/>
    </springProfile>

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout">
                <Pattern>${LOG_PATTERN}</Pattern>
                <charset>utf8</charset>
            </layout>
        </encoder>
    </appender>

    <!-- 文件输出 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当前写入日志的主文件 -->
        <file>log/${APP_NAME}-${PROFILE}.log</file>

        <!-- 滚动策略：基于时间和大小，并压缩 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名模式：按天分割 + 序号 + GZ 压缩 -->
            <fileNamePattern>log/${APP_NAME}-${PROFILE}.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>

            <!-- 触发策略：每个日志文件最大10MB -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

            <!-- 保留历史日志天数：30天 -->
            <maxHistory>30</maxHistory>

            <!-- 可选：限制总日志大小（例如最多保留2GB） -->
            <!-- <totalSizeCap>2GB</totalSizeCap> -->
        </rollingPolicy>

        <!-- 使用 SkyWalking layout -->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout">
                <Pattern>${LOG_PATTERN}</Pattern>
                <charset>utf8</charset>
            </layout>
        </encoder>
    </appender>

    <!-- 向 SkyWalking 输出日志 -->
    <appender name="GRPC_LOG" class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout">
                <Pattern>${LOG_PATTERN}</Pattern>
                <charset>utf8</charset>
            </layout>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>4096</queueSize>
        <neverBlock>false</neverBlock>
        <appender-ref ref="STDOUT"/>
    </appender>

    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>4096</queueSize>
        <neverBlock>false</neverBlock>
        <appender-ref ref="FILE"/>
    </appender>

    <!-- Root logger -->
    <root level="INFO">
        <appender-ref ref="ASYNC"/>
        <appender-ref ref="ASYNC_FILE"/>
        <appender-ref ref="GRPC_LOG"/>
    </root>

</configuration>